{"version":3,"sources":["../main.js"],"names":["app","flickr","geocode","lp","get","req","res","json","name","version","authors","city","params","country","then","sights","splice","geocodes","map","query","sight","Promise","resolve","reject","all","locations","data","results","geometry","location","index","Object","assign","catch","photos","lat","lon","lng","text","populaties","total","popularity","parseInt","sort","a","b","console","error","listen","process","env","port"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,SAAS,wBAAW,kCAAX,EAA+C,MAA/C,CAAf;AACA,IAAMC,UAAU,yBAAY,yCAAZ,EAAuD,MAAvD,CAAhB;AACA,IAAMC,KAAK,+BAAX;;AAEAH,IAAII,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIC,IAAJ,CAAS;AACLC,cAAM,iBADD;AAELC,iBAAS,OAFJ;AAGLC,iBAAS,CACL,4BADK,EAEL,mCAFK,EAGL,2BAHK;AAHJ,KAAT;AASH,CAVD;;AAYAV,IAAII,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCH,OAAGQ,IAAH,CAAQN,IAAIO,MAAJ,CAAWC,OAAX,GAAqBR,IAAIO,MAAJ,CAAW,CAAX,CAA7B,EACKE,IADL,CACU,gBAAQ;AACV,eAAOH,KAAKI,MAAL,EAAP;AACH,KAHL,EAIKD,IAJL,CAIU,kBAAU;AACZC,eAAOC,MAAP,CAAc,EAAd;;AAEA,YAAIC,WAAWF,OAAOG,GAAP,CAAW,iBAAS;AAC/B,mBAAOhB,QAAQiB,KAAR,CAAiBC,MAAMT,IAAN,CAAWE,OAA5B,SAAuCO,MAAMT,IAAN,CAAWA,IAAlD,SAA0DS,MAAMZ,IAAhE,CAAP;AACH,SAFc,CAAf;;AAIA,eAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCF,oBAAQG,GAAR,CAAYP,QAAZ,EACKH,IADL,CACU,gBAAQ;AACV,oBAAIW,YAAYC,KAAKR,GAAL,CAAS,mBAAW;AAChC,2BAAOhB,QAAQyB,OAAR,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4BC,QAAnC;AACH,iBAFe,CAAhB;;AAIAP,wBAAQP,OAAOG,GAAP,CAAW,UAACE,KAAD,EAAQU,KAAR,EAAkB;AACjC,2BAAOC,OAAOC,MAAP,CAAcZ,KAAd,EAAqBK,UAAUK,KAAV,CAArB,CAAP;AACH,iBAFO,CAAR;AAGH,aATL,EAUKG,KAVL,CAUWV,MAVX;AAWH,SAZM,CAAP;AAaH,KAxBL,EAyBKT,IAzBL,CAyBU,kBAAU;AACZ,YAAIoB,SAASnB,OAAOG,GAAP,CAAW,iBAAS;AAC7B,mBAAOjB,OAAOkB,KAAP,CAAa,eAAb,EAA8B;AACjCgB,qBAAKf,MAAMe,GADsB;AAEjCC,qBAAKhB,MAAMiB,GAFsB;AAGjCC,sBAAMlB,MAAMZ;AAHqB,aAA9B,CAAP;AAKH,SANY,CAAb;;AAQA,eAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCF,oBAAQG,GAAR,CAAYU,MAAZ,EACKpB,IADL,CACU,gBAAQ;AACV,oBAAIyB,aAAab,KAAKR,GAAL,CAAS,kBAAU;AAChC,2BAAOgB,OAAOA,MAAP,CAAcM,KAArB;AACH,iBAFgB,CAAjB;;AAIAlB,wBAAQP,OAAOG,GAAP,CAAW,UAACE,KAAD,EAAQU,KAAR,EAAkB;AACjC,2BAAOC,OAAOC,MAAP,CAAcZ,KAAd,EAAqB,EAACqB,YAAYC,SAASH,WAAWT,KAAX,CAAT,CAAb,EAArB,CAAP;AACH,iBAFO,CAAR;AAGH,aATL,EAUKG,KAVL,CAUWV,MAVX;AAWH,SAZM,CAAP;AAaH,KA/CL,EAgDKT,IAhDL,CAgDU,kBAAU;AACZC,eAAO4B,IAAP,CAAY,UAACC,CAAD,EAAGC,CAAH;AAAA,mBAASA,EAAEJ,UAAF,GAAeG,EAAEH,UAA1B;AAAA,SAAZ;AACAnC,YAAIC,IAAJ,CAASQ,MAAT;AACH,KAnDL,EAoDKkB,KApDL,CAoDWa,QAAQC,KApDnB;AAqDH,CAtDD;;AAwDA/C,IAAIgD,MAAJ,CAAWC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B","file":"main.js","sourcesContent":["import express from 'express';\r\nimport LonelyPlanet from 'lonelyplanet-api';\r\nimport Flickr from 'flickr-api';\r\nimport Geocode from 'geocode-api';\r\n\r\nconst app = express();\r\nconst flickr = new Flickr('85f11febb88e3a4d49342a95b7bcf1e8', 'json');\r\nconst geocode = new Geocode('AIzaSyDfZBp51fjQZwk4QogCZIUtRaz8z96G0Ks', 'json');\r\nconst lp = new LonelyPlanet();\r\n\r\napp.get('/', (req, res) => {\r\n    res.json({\r\n        name: 'attractions-api',\r\n        version: '0.0.1',\r\n        authors: [\r\n            'Rasmus NÃ¸rskov (rhnorskov)',\r\n            'Mathias Wieland (mathias.wieland)',\r\n            'Andreas Sommerset (asomm)'\r\n        ]\r\n    })\r\n});\r\n\r\napp.get('/:country*', (req, res) => {\r\n    lp.city(req.params.country + req.params[0])\r\n        .then(city => {\r\n            return city.sights();\r\n        })\r\n        .then(sights => {\r\n            sights.splice(10);\r\n\r\n            let geocodes = sights.map(sight => {\r\n                return geocode.query(`${sight.city.country} ${sight.city.city} ${sight.name}`);\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all(geocodes)\r\n                    .then(data => {\r\n                        let locations = data.map(geocode => {\r\n                            return geocode.results[0].geometry.location;\r\n                        });\r\n\r\n                        resolve(sights.map((sight, index) => {\r\n                            return Object.assign(sight, locations[index]);\r\n                        }));\r\n                    })\r\n                    .catch(reject);\r\n            });\r\n        })\r\n        .then(sights => {\r\n            let photos = sights.map(sight => {\r\n                return flickr.query('photos.search', {\r\n                    lat: sight.lat,\r\n                    lon: sight.lng,\r\n                    text: sight.name\r\n                })\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all(photos)\r\n                    .then(data => {\r\n                        let populaties = data.map(photos => {\r\n                            return photos.photos.total;\r\n                        });\r\n\r\n                        resolve(sights.map((sight, index) => {\r\n                            return Object.assign(sight, {popularity: parseInt(populaties[index])});\r\n                        }));\r\n                    })\r\n                    .catch(reject);\r\n            });\r\n        })\r\n        .then(sights => {\r\n            sights.sort((a,b) => b.popularity - a.popularity);\r\n            res.json(sights);\r\n        })\r\n        .catch(console.error)\r\n});\r\n\r\napp.listen(process.env.port || 3000);\r\n"]}