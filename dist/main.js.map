{"version":3,"sources":["../main.js"],"names":["getLocations","sights","geocode","geocodes","map","query","sight","city","country","name","Promise","all","then","filter","status","locations","results","geometry","location","resolve","index","Object","assign","getPopularity","flickr","photos","lat","lon","lng","text","populaties","data","total","popularity","parseInt","Attractions","apiKeys","limit","lp","splice","sort","a","b","catch","console","log"],"mappings":"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","file":"main.js","sourcesContent":["import LonelyPlanet from 'lonelyplanet-api';\nimport Flickr from 'flickr-api';\nimport Geocode from 'geocode-api';\n\nconst getLocations = (sights, geocode) => {\n  let geocodes = sights.map(sight => {\n    return geocode.query(`${sight.city.country} ${sight.city.city} ${sight.name}`);\n  });\n\n  return new Promise(resolve => {\n    Promise.all(geocodes).then(geocodes => {\n      geocodes = geocodes.filter(geocodes => geocodes.status === 'OK');\n\n      let locations = geocodes.map(geocode => {\n        return geocode.results[0].geometry.location;\n      });\n\n      resolve(sights.map((sight, index) => {\n        return Object.assign(sight, locations[index]);\n      }));\n    });\n  });\n};\n\nconst getPopularity = (sights, flickr) => {\n  let photos = sights.map(sight => (\n      flickr.query('photos.search', {\n        lat: sight.lat,\n        lon: sight.lng,\n        text: sight.name,\n      })\n  ));\n\n  return new Promise(resolve => {\n    Promise.all(photos).then(data => {\n      let populaties = data.map(photos => {\n        return photos.photos.total;\n      });\n\n      resolve(sights.map((sight, index) => {\n        return Object.assign(sight, {popularity: parseInt(populaties[index])});\n      }));\n    });\n  });\n};\n\nclass Attractions {\n  constructor(apiKeys, limit = 0) {\n    this.limit = limit;\n    this.flickr = new Flickr(apiKeys.flickr, 'json');\n    this.geocode = new Geocode(apiKeys.geocode, 'json');\n    this.lp = new LonelyPlanet();\n  }\n\n  query(city) {\n    return new Promise(resolve => {\n      this.lp.city(city).then(city => {\n        return city.sights();\n      }).then(sights => {\n        if (this.limit > 0)\n          sights.splice(this.limit);\n        return getLocations(sights, this.geocode);\n      }).then(sights => {\n        return getPopularity(sights, this.flickr);\n      }).then(sights => {\n        sights.sort((a, b) => b.popularity - a.popularity);\n        resolve(sights);\n      }).catch(console.log);\n    });\n  }\n}\n\nexport default Attractions;\n\n\n"]}